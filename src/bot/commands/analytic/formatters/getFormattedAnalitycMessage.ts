import { formatWord } from '@utils'
import { type AnalyticStats, AnalyticType } from '../types'

/**
 * –¢–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
 */
type Formatter = (stats: AnalyticStats) => string

/**
 * –û–±—ä–µ–∫—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞–º–∏ –ø–æ —Ç–∏–ø—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
const formatters: Record<AnalyticType, Formatter> = {
  [AnalyticType.PERSONAL]: formatPersonalAnalytics,
  [AnalyticType.TEAM]: formatTeamAnalytics,
  [AnalyticType.REVIEWS]: formatReviewsAnalytics,
  [AnalyticType.TASKS]: formatTasksAnalytics
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 * –í—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –ø–æ —Ç–∏–ø—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
 * –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
 */
export const getFormattedAnalyticMessage = (stats: AnalyticStats): string => {
  const formatter = formatters[stats.type]
  if (!formatter) return '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
  return formatter(stats)
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö.
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞—â–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 */
function checkStats<T>(
  data: T | undefined,
  errorMsg: string
): asserts data is T {
  if (!data) throw new Error(errorMsg)
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
 */
function formatPersonalAnalytics(stats: AnalyticStats): string {
  try {
    checkStats(stats.userStats, '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
  } catch {
    return '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
  }

  const { completedTasks, openTasks, reviewsGiven, commentsLeft } =
    stats.userStats

  const lines = [
    'üìä **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**',
    '',
    `‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω${completedTasks === 1 ? '–∞' : '–æ'} ${completedTasks} ${formatWord(completedTasks, '–∑–∞–¥–∞—á–∞', '–∑–∞–¥–∞—á–∏', '–∑–∞–¥–∞—á')}`,
    `üìù –û—Ç–∫—Ä—ã—Ç${openTasks === 1 ? '–∞' : '–æ'} ${openTasks} ${formatWord(openTasks, '–∑–∞–¥–∞—á–∞', '–∑–∞–¥–∞—á–∏', '–∑–∞–¥–∞—á')}`,
    `üîç –ü—Ä–æ–≤–µ–¥–µ–Ω–æ ${reviewsGiven} ${formatWord(reviewsGiven, '—Ä–µ–≤—å—é', '—Ä–µ–≤—å—é', '—Ä–µ–≤—å—é')}`,
    `üí¨ –û—Å—Ç–∞–≤–ª–µ–Ω–æ ${commentsLeft} ${formatWord(commentsLeft, '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')}`
  ]

  return lines.join('\n')
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã.
 */
function formatTeamAnalytics(stats: AnalyticStats): string {
  try {
    checkStats(stats.teamStats, '–î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
  } catch {
    return '–î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
  }

  const {
    totalCompletedTasks,
    totalResolvedBugs,
    totalReviewComments,
    totalOpenTasks,
    avgReviewTime,
    topPerformers
  } = stats.teamStats

  const avgTimeFormatted = avgReviewTime.toFixed(2)

  const lines = [
    'üèÜ **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã**',
    '',
    `‚úÖ –í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: ${totalCompletedTasks} ${formatWord(totalCompletedTasks, '–∑–∞–¥–∞—á–∞', '–∑–∞–¥–∞—á–∏', '–∑–∞–¥–∞—á')}`,
    `üìù –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á: ${totalOpenTasks} ${formatWord(totalOpenTasks, '–∑–∞–¥–∞—á–∞', '–∑–∞–¥–∞—á–∏', '–∑–∞–¥–∞—á')}`,
    `üêû –ó–∞–∫—Ä—ã—Ç–æ –±–∞–≥–æ–≤: ${totalResolvedBugs} ${formatWord(totalResolvedBugs, '–±–∞–≥', '–±–∞–≥–∞', '–±–∞–≥–æ–≤')}`,
    `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ä–µ–≤—å—é: ${totalReviewComments} ${formatWord(totalReviewComments, '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')}`,
    `‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–≤—å—é: ${avgTimeFormatted} —á.`,
    '',
    '**–¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:**',
    ...topPerformers.map(
      (u, i) =>
        `${i + 1}. ${u.name} - ${u.completedTasks} ${formatWord(u.completedTasks, '–∑–∞–¥–∞—á–∞', '–∑–∞–¥–∞—á–∏', '–∑–∞–¥–∞—á')} ‚Ä¢ üí¨ ${u.commentsLeft ?? 0} ‚Ä¢ üêû ${u.bugsClosed ?? 0}`
    )
  ]

  return lines.join('\n')
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ä–µ–≤—å—é.
 */
function formatReviewsAnalytics(stats: AnalyticStats): string {
  try {
    checkStats(stats.userStats, '–î–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
  } catch {
    return '–î–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
  }

  const { reviewsGiven, commentsLeft } = stats.userStats

  const lines = [
    'üîç **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–≤—å—é**',
    '',
    `üìä –ü—Ä–æ–≤–µ–¥–µ–Ω–æ ${reviewsGiven} ${formatWord(reviewsGiven, '—Ä–µ–≤—å—é', '—Ä–µ–≤—å—é', '—Ä–µ–≤—å—é')}`,
    `üí¨ –û—Å—Ç–∞–≤–ª–µ–Ω–æ ${commentsLeft} ${formatWord(commentsLeft, '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')}`
  ]

  return lines.join('\n')
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º.
 */
function formatTasksAnalytics(stats: AnalyticStats): string {
  try {
    checkStats(stats.userStats, '–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞—á–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
  } catch {
    return '–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞—á–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
  }

  const { completedTasks, openTasks } = stats.userStats

  const lines = [
    'üìù **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–¥–∞—á**',
    '',
    `‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω${completedTasks === 1 ? '–∞' : '–æ'} ${completedTasks} ${formatWord(completedTasks, '–∑–∞–¥–∞—á–∞', '–∑–∞–¥–∞—á–∏', '–∑–∞–¥–∞—á')}`,
    `üîÑ –û—Ç–∫—Ä—ã—Ç${openTasks === 1 ? '–∞' : '–æ'} ${openTasks} ${formatWord(openTasks, '–∑–∞–¥–∞—á–∞', '–∑–∞–¥–∞—á–∏', '–∑–∞–¥–∞—á')}`
  ]

  return lines.join('\n')
}
