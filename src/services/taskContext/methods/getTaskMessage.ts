import { formatWord } from '@utils'

import type { TagType } from '@database'

import type { ReviewFields, Task } from 'clients/weeek'

export const getTaskMessage = (task: Task, fields: ReviewFields) => {
  let message = ''

  const hasTag = (tagToCheck: TagType) => {
    return fields.tags?.some((tag) => {
      return tag === tagToCheck
    })
  }

  const isEmergency = hasTag('Emergency')

  // Title - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Weeek
  if (task.title && task.id) {
    if (isEmergency) {
      message += `üî•üî• [${task.title}](${fields.taskUrl}) üî•üî•`
    } else message += `[${task.title}](${fields.taskUrl})`
  } else {
    message += '‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
  }

  message += '  \n\n'

  // Merge Request - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ MR
  if (fields.mrUrl) {
    message += `üìù [MR](${fields.mrUrl})`

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    if (fields.mr?.hasConflicts) {
      message += ' (‚õîÔ∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã)'
    }

    // –ï—Å–ª–∏ –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç main
    if (fields.mr?.branchBehindBy && fields.mr.branchBehindBy > 0) {
      message += `  \nüì• –û—Ç—Å—Ç–∞–µ—Ç –æ—Ç main –Ω–∞ ${
        fields.mr.branchBehindBy
      } ${formatWord(
        fields.mr.branchBehindBy,
        '–∫–æ–º–º–∏—Ç',
        '–∫–æ–º–º–∏—Ç–∞',
        '–∫–æ–º–º–∏—Ç–æ–≤'
      )}`
    }
  } else {
    message += 'üìù‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ MR'
  }

  if (fields.tests.isNeeded) {
    message += '  \n'
    // Tests - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (fields.tests.isStarted) {
      if (fields.tests.isCompleted) {
        if (fields.tests.total > 0) {
          message += `ü™≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ: [${
            fields.tests.total - Number(fields.tests.unresolved?.length)
          }/${fields.tests.total}](${fields.tests.taskUrl}) ‚úÖ`
        } else {
          message += 'ü™≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ –±–µ–∑ –±–∞–≥–æ–≤ üéâ‚úÖ'
        }
      } else {
        if (fields.tests.total > 0) {
          message += `ü™≤ –ë–∞–≥–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: [${
            fields.tests.total - Number(fields.tests.unresolved?.length)
          }/${fields.tests.total}](${fields.tests.taskUrl})`
        } else {
          message += 'ü™≤ –ò–¥—ë—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...'
        }
      }
    } else {
      if (fields.isEmergency) {
        message += 'ü™≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: üî• –æ–∂–∏–¥–∞–µ—Ç—Å—è üî•'
      } else {
        message += 'ü™≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è'
      }
    }
  }

  message += '  \n'

  // Comments - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–æ–≤ –≤ –º—Ä-–µ
  if (fields.mr?.comments) {
    message += '  \n'
    message += 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: '
    if (fields.mr.comments.total > 0) {
      if (fields.mr.comments.unresolved === 0) {
        // –í—Å–µ —Ä–µ—à–µ–Ω—ã
        message += `[${fields.mr.comments.total}](${fields.mrUrl}) ‚úÖ `
      } else {
        // –ù–µ –≤—Å–µ —Ä–µ—à–µ–Ω—ã
        message += `[${
          fields.mr.comments.total - fields.mr.comments.unresolved
        }/${fields.mr.comments.total}](${fields.mrUrl})`
      }
    } else {
      // –ï—â—ë –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã
      if (isEmergency) {
        message += 'üî• –æ–∂–∏–¥–∞—é—Ç—Å—è üî•'
      } else {
        message += '–æ–∂–∏–¥–∞—é—Ç—Å—è'
      }
    }
  }

  // ActionsNeeded - –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –≥–¥–µ –æ—Ç –∫–æ–≥–æ –∂–¥—É—Ç –æ—Ç–≤–µ—Ç–æ–≤
  if (fields.mr?.comments?.actionsNeeded.length) {
    message += '  \n'
    message += 'üèì –û–∂–∏–¥–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã –æ—Ç:  \n'
    let firstAssigned = true

    for (const assigned of fields.mr.comments.actionsNeeded) {
      if (!firstAssigned) {
        message += '  \n'
      }

      message += `[${assigned.assigned.name}](${assigned.assigned.telegramLink}):  \n`
      let firstComment = true

      for (const comment of assigned.comments) {
        if (!firstComment) {
          message += ', '
        }
        message += `[${comment.id}](${comment.link})`
        firstComment = false
      }

      firstAssigned = false
    }
  }

  // Reviewers - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ø–ø—Ä—É–≤–æ–≤ –≤ –º—Ä-–µ
  if (fields.mr?.reviewers) {
    message += '  \n'
    message += 'üìã –ê–ø–ø—Ä—É–≤—ã: '
    if (fields.mr.reviewers.total > 0) {
      message += `[${
        fields.mr.reviewers.total - fields.mr.reviewers.unresolved.length
      }/${fields.mr.reviewers.total}](${fields.mrUrl})`

      if (fields.mr.reviewers.unresolved.length === 0) {
        message += ' ‚úÖ'
      }
    } else {
      message += '–Ω–µ –Ω—É–∂–Ω—ã ‚úÖ'
    }
  }
  // –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ Reviewers
  if (fields.mr?.reviewers?.reviewNeeded?.length) {
    message += '  \n'
    message += 'üñã –û–∂–∏–¥–∞—é—Ç—Å—è –∞–ø–ø—Ä—É–≤—ã –æ—Ç:  \n'
    let first = true

    for (const item of fields.mr.reviewers.reviewNeeded) {
      if (!first) {
        message += ', '
      }
      message += `[${item.name}](${item.telegramLink})`
      first = false
    }
  }

  message += '  \n\n'

  // Author - –∞—Ç–≤–æ—Ä –∑–∞–¥–∞—á–∏
  if (fields.assignees.length >= 1) {
    if (fields.assignees.length === 1) {
      message += '‚úçÔ∏è –ê–≤—Ç–æ—Ä: '
    } else {
      message += '‚úçÔ∏è –ê–≤—Ç–æ—Ä—ã: '
    }

    for (const assignees of fields.assignees) {
      message += `[${assignees.name}](${assignees.telegramLink}) `
    }

    message += ' \n'
  }

  // Tags - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (fields.tags && fields.tags.length > 0) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–µ–≥–∞—Ö
    const tags = fields.tags
      .map((tag) => {
        if (!tag) {
          return
        }

        return `#${tag.replace(/\s+/g, '')}`
      })
      .join(' ')
    message += `#Ô∏è‚É£ –¢–µ–≥–∏: ${tags}  \n`
  } else {
    message += '#Ô∏è‚É£‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–µ–≥–∏  \n'
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
  if (task.dueDate) {
    message += `üìÖ –¥–æ ${new Date(task.dueDate).toLocaleDateString('ru', {
      day: 'numeric',
      month: 'long'
    })}\n`
  }

  // Images - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞–¥–∞—á —Å —Ç–µ–≥–æ–º Docs
  if (hasTag('Docs')) {
    if (!fields.images || fields.images.length === 0) {
      message +=
        '  \n‚ùó –î–ª—è –∑–∞–¥–∞—á —Å —Ç–µ–≥–æ–º Docs –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    }
  }

  // Videos - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞–¥–∞—á —Å —Ç–µ–≥–∞–º–∏ Fullstack –∏–ª–∏ Frontend
  if (
    !hasTag('WithoutMediaTesting') &&
    (hasTag('Frontend') || hasTag('Fullstack'))
  ) {
    if (!fields.videos || fields.videos.length === 0) {
      message +=
        '  \n‚ùó –î–ª—è –∑–∞–¥–∞—á —Å —Ç–µ–≥–æ–º Frontend –∏–ª–∏ Fullstack –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏'
    }
  }

  return message
}
